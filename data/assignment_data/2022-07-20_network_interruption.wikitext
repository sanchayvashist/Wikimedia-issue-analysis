{{irdoc|status=review}}

==Summary==
{{Incident scorecard
| task = T313382
| paged-num = 11
| responders-num = 3
| coordinators = rzl
| start = 2022-07-20 03:16
| end = 2022-07-20 03:25 (mostly)
| metrics = No relevant SLOs exist. See impact metrics below.
| impact = The network was partitioned for 6 minutes.
* About 970,000 external requests failed to reach varnish-frontend during 11 minutes, or 0.2% of total traffic.
* About 1.2 million requests failed to reach appservers (app and API combined) during 16 minutes, or 26% of expected ''uncached'' traffic. This is higher as it includes certain internal requests.
* CDN HTTP 5xx error briefly increased from under 1/s to 10-20/s.
* Phabricator was unavailable for 32 minutes.
* The Kubernetes API was at least partially unavailable for 52 minutes, but during a period where no control operations are normally in progress.
}}
<!-- Reminder: No private information on this page! -->[[File:CDN and appserver 2022-07-20 grafana.png|thumb|CDN and appserver impact]]
At 03:16, the top-of-rack switch asw2-c-eqiad virtual chassis lost connectivity to FPC5, partitioning the network. This caused a hard down event for all hosts in rack C5 ([https://netbox.wikimedia.org/dcim/racks/21/ netbox]). It also caused additional instability due to how the virtual chassis works, and because it's incorrectly cabled up.

We received a burst of both paging and non-paging alerts: Icinga reporting hosts down; BGP status; application-level errors; and MariaDB replica alerts. At least one user also reported via IRC that they couldn't access metawiki (almost certainly uncacheable traffic, due to logged-in state).

At 03:22, asw2-c-eqiad:fpc5 came back online. Most systems recovered automatically, but some needed manual attention:

* We received [[HAProxy#Failover|HAProxy failover]] alerts on dbproxy1018 through 1021, and those needed to be resolved by reloading haproxy manually, as expected.
* Phabricator's dbproxy had failed over to a read-only replica (as expected) but Phabricator was unavailable for read-only tasks in read-only mode. When users attempted to view a task, they got an error page saying, <code>Unhandled Exception ("AphrontQuery Exception") #1290: The MariaDB server is running with the --read-only option so it cannot execute this statement</code> This was resolved by reloading haproxy, but Phab was expected to be available for reads.
* The Kubernetes API server alerted for high latency until kube-apiserver was [[Kubernetes#Restarting the API server|manually restarted]] on both hosts. 
Documentation:

* [https://grafana.wikimedia.org/d/-K8NgsUnz/home?orgId=1&from=1658282400000&to=1658293200000 Grafana dashboard: Home]

==Actionables==

*[[phab:T313384|T313384]] Recable eqiad row C switch fabric, so that in the future a failure like this will only impact servers in rack C5.
*[[phab:T313382#8090176|T313382#8090176]] Move critical hosts, like DB masters, away from rack C5 until its top-of-rack switch is trustworthy.
*{{Done}} [[phab:T313382#8090224|T313382#8090224]] Add LibreNMS alerting (and [[Network monitoring#virtual-chassis crash|runbook]]) for this scenario, which will speed up troubleshooting.
*[[phab:T313879|T313879]] Make read-only Phabricator operations possible when its database is in read-only mode.

==Scorecard==

{| class="wikitable"
|+[[Incident Scorecard|Incident Engagement ScoreCard]]
!
!Question
!Answer
(yes/no)
!Notes
|-
! rowspan="5" |People
|Were the people responding to this incident sufficiently different than the previous five incidents?
|yes
|
|-
|Were the people who responded prepared enough to respond effectively
|no
|The IC was able to respond effectively to the downstream failures (DB, appservers, Phab, k8s, etc) but wasn't able to identify the root cause or troubleshoot in LibreNMS effectively due to lack of familiarity.
|-
|Were fewer than five people paged?
|no
|
|-
|Were pages routed to the correct sub-team(s)?
|no
|
|-
|Were pages routed to online (business hours) engineers?  ''Answer “no” if engineers were paged after business hours.''
|no
|
|-
! rowspan="5" |Process
|Was the incident status section actively updated during the incident?
|no
|Only one SRE responded during the incident, so the incident doc was created afterward, to organize the timeline and followup items.
|-
|Was the public status page updated?
|no
|Not justified given the impact
|-
|Is there a phabricator task for the incident?
|yes
|
|-
|Are the documented action items assigned?
|no
|
|-
|Is this incident sufficiently different from earlier incidents so as not to be a repeat occurrence?
|yes
|
|-
! rowspan="5" |Tooling
|To the best of your knowledge was the open task queue free of any tasks that would have prevented this incident? ''Answer “no” if there are''
''open tasks that would prevent this incident or make mitigation easier if implemented.''
|yes
|
|-
|Were the people responding able to communicate effectively during the incident with the existing tooling?
|yes
|
|-
|Did existing monitoring notify the initial responders?
|yes
|
|-
|Were the engineering tools that were to be used during the incident, available and in service?
|no
|Reading Phab tasks for context was impossible due to its being unavailable in RO mode
|-
|Were the steps taken to mitigate guided by an existing runbook?
|yes
|
|-
! colspan="2" align="right" |Total score (count of all “yes” answers above)
|7
|
|}